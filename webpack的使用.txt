webpack 模块化加载的工具兼打包工具

全局安装
npm install webpack -g

在本地创建package.json
npm init

本地安装webpack
npm install webpack --save-dev

使用方式1：
命令执行：webpack 需要编译的文件路径  编译完成保存的路径
(webpack模块化代码完成后，需要使用编译得到的文件)


使用方式2：
创建webpack.config.js文件
在这个文件中定义执行webpack的行为

安装能够解析样式的loader
style-loader：识别样式表
css-loader： 解析样式
npm install css-loader style-loader --save-dev


安装本地服务
全局安装
npm install webpack-dev-server -g
本地安装
npm install webpack-dev-server --save-dev

开启服务：
执行命令：webpack-dev-server --inline --hot



安装babel: 将es6转为es5
全局安装
npm install babel-cli -g

本地安装
npm install babel-cli --save-dev
npm install babel-loader babel-core --save-dev
npm install babel-preset-es2015 --save-dev

在本地创建文件，名字为.babelrc
内容为： { presets: ["es2015"] } 
具体操作：
在命令行执行：   echo  { presets: ["es2015"] }>.babelrc































main.js
subpage1.js
subpage2.js
global.js

通过控制器划分作用域 
controller $scope


var test = 'hello'


代码逻辑模块化

var mainObj = main.js
var name = 'sdfad';
var sub1Obj = subpage1.js
var name = '31243';
var sub2Obj = subpage2.js
var sub3Obj = global.js
	getPath

sub3Obj.getpath

sub1Obj.doSomething(sub3Obj.getpath)


代码加载模块化













